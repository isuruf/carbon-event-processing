/*
 * Copyright (c) 2005-2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.wso2.carbon.event.processor.management.internal.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ManagementService {

  public interface Iface {

    public org.wso2.carbon.event.processor.management.internal.thrift.data.SnapshotData takeSnapshot() throws org.wso2.carbon.event.processor.management.internal.thrift.exception.InternalServerException, TException;

  }

  public interface AsyncIface {

    public void takeSnapshot(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.takeSnapshot_call> resultHandler) throws TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public org.wso2.carbon.event.processor.management.internal.thrift.data.SnapshotData takeSnapshot() throws org.wso2.carbon.event.processor.management.internal.thrift.exception.InternalServerException, TException
    {
      send_takeSnapshot();
      return recv_takeSnapshot();
    }

    public void send_takeSnapshot() throws TException
    {
      takeSnapshot_args args = new takeSnapshot_args();
      sendBase("takeSnapshot", args);
    }

    public org.wso2.carbon.event.processor.management.internal.thrift.data.SnapshotData recv_takeSnapshot() throws org.wso2.carbon.event.processor.management.internal.thrift.exception.InternalServerException, TException
    {
      takeSnapshot_result result = new takeSnapshot_result();
      receiveBase(result, "takeSnapshot");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ise != null) {
        throw result.ise;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "takeSnapshot failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void takeSnapshot(org.apache.thrift.async.AsyncMethodCallback<takeSnapshot_call> resultHandler) throws TException {
      checkReady();
      takeSnapshot_call method_call = new takeSnapshot_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class takeSnapshot_call extends org.apache.thrift.async.TAsyncMethodCall {
      public takeSnapshot_call(org.apache.thrift.async.AsyncMethodCallback<takeSnapshot_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("takeSnapshot", org.apache.thrift.protocol.TMessageType.CALL, 0));
        takeSnapshot_args args = new takeSnapshot_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.wso2.carbon.event.processor.management.internal.thrift.data.SnapshotData getResult() throws org.wso2.carbon.event.processor.management.internal.thrift.exception.InternalServerException, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_takeSnapshot();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("takeSnapshot", new takeSnapshot());
      return processMap;
    }

    public static class takeSnapshot<I extends Iface> extends org.apache.thrift.ProcessFunction<I, takeSnapshot_args> {
      public takeSnapshot() {
        super("takeSnapshot");
      }

      public takeSnapshot_args getEmptyArgsInstance() {
        return new takeSnapshot_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public takeSnapshot_result getResult(I iface, takeSnapshot_args args) throws TException {
        takeSnapshot_result result = new takeSnapshot_result();
        try {
          result.success = iface.takeSnapshot();
        } catch (org.wso2.carbon.event.processor.management.internal.thrift.exception.InternalServerException ise) {
          result.ise = ise;
        }
        return result;
      }
    }

  }

  public static class takeSnapshot_args implements org.apache.thrift.TBase<takeSnapshot_args, takeSnapshot_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("takeSnapshot_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new takeSnapshot_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new takeSnapshot_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(takeSnapshot_args.class, metaDataMap);
    }

    public takeSnapshot_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public takeSnapshot_args(takeSnapshot_args other) {
    }

    public takeSnapshot_args deepCopy() {
      return new takeSnapshot_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof takeSnapshot_args)
        return this.equals((takeSnapshot_args)that);
      return false;
    }

    public boolean equals(takeSnapshot_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(takeSnapshot_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      takeSnapshot_args typedOther = (takeSnapshot_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("takeSnapshot_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class takeSnapshot_argsStandardSchemeFactory implements SchemeFactory {
      public takeSnapshot_argsStandardScheme getScheme() {
        return new takeSnapshot_argsStandardScheme();
      }
    }

    private static class takeSnapshot_argsStandardScheme extends StandardScheme<takeSnapshot_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, takeSnapshot_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, takeSnapshot_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class takeSnapshot_argsTupleSchemeFactory implements SchemeFactory {
      public takeSnapshot_argsTupleScheme getScheme() {
        return new takeSnapshot_argsTupleScheme();
      }
    }

    private static class takeSnapshot_argsTupleScheme extends TupleScheme<takeSnapshot_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, takeSnapshot_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, takeSnapshot_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class takeSnapshot_result implements org.apache.thrift.TBase<takeSnapshot_result, takeSnapshot_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("takeSnapshot_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ISE_FIELD_DESC = new org.apache.thrift.protocol.TField("ise", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new takeSnapshot_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new takeSnapshot_resultTupleSchemeFactory());
    }

    public org.wso2.carbon.event.processor.management.internal.thrift.data.SnapshotData success; // required
    public org.wso2.carbon.event.processor.management.internal.thrift.exception.InternalServerException ise; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ISE((short)1, "ise");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ISE
            return ISE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.wso2.carbon.event.processor.management.internal.thrift.data.SnapshotData.class)));
      tmpMap.put(_Fields.ISE, new org.apache.thrift.meta_data.FieldMetaData("ise", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(takeSnapshot_result.class, metaDataMap);
    }

    public takeSnapshot_result() {
    }

    public takeSnapshot_result(
      org.wso2.carbon.event.processor.management.internal.thrift.data.SnapshotData success,
      org.wso2.carbon.event.processor.management.internal.thrift.exception.InternalServerException ise)
    {
      this();
      this.success = success;
      this.ise = ise;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public takeSnapshot_result(takeSnapshot_result other) {
      if (other.isSetSuccess()) {
        this.success = new org.wso2.carbon.event.processor.management.internal.thrift.data.SnapshotData(other.success);
      }
      if (other.isSetIse()) {
        this.ise = new org.wso2.carbon.event.processor.management.internal.thrift.exception.InternalServerException(other.ise);
      }
    }

    public takeSnapshot_result deepCopy() {
      return new takeSnapshot_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ise = null;
    }

    public org.wso2.carbon.event.processor.management.internal.thrift.data.SnapshotData getSuccess() {
      return this.success;
    }

    public takeSnapshot_result setSuccess(org.wso2.carbon.event.processor.management.internal.thrift.data.SnapshotData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.wso2.carbon.event.processor.management.internal.thrift.exception.InternalServerException getIse() {
      return this.ise;
    }

    public takeSnapshot_result setIse(org.wso2.carbon.event.processor.management.internal.thrift.exception.InternalServerException ise) {
      this.ise = ise;
      return this;
    }

    public void unsetIse() {
      this.ise = null;
    }

    /** Returns true if field ise is set (has been assigned a value) and false otherwise */
    public boolean isSetIse() {
      return this.ise != null;
    }

    public void setIseIsSet(boolean value) {
      if (!value) {
        this.ise = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.wso2.carbon.event.processor.management.internal.thrift.data.SnapshotData)value);
        }
        break;

      case ISE:
        if (value == null) {
          unsetIse();
        } else {
          setIse((org.wso2.carbon.event.processor.management.internal.thrift.exception.InternalServerException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ISE:
        return getIse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ISE:
        return isSetIse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof takeSnapshot_result)
        return this.equals((takeSnapshot_result)that);
      return false;
    }

    public boolean equals(takeSnapshot_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ise = true && this.isSetIse();
      boolean that_present_ise = true && that.isSetIse();
      if (this_present_ise || that_present_ise) {
        if (!(this_present_ise && that_present_ise))
          return false;
        if (!this.ise.equals(that.ise))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(takeSnapshot_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      takeSnapshot_result typedOther = (takeSnapshot_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIse()).compareTo(typedOther.isSetIse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ise, typedOther.ise);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("takeSnapshot_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ise:");
      if (this.ise == null) {
        sb.append("null");
      } else {
        sb.append(this.ise);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class takeSnapshot_resultStandardSchemeFactory implements SchemeFactory {
      public takeSnapshot_resultStandardScheme getScheme() {
        return new takeSnapshot_resultStandardScheme();
      }
    }

    private static class takeSnapshot_resultStandardScheme extends StandardScheme<takeSnapshot_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, takeSnapshot_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.wso2.carbon.event.processor.management.internal.thrift.data.SnapshotData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ISE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ise = new org.wso2.carbon.event.processor.management.internal.thrift.exception.InternalServerException();
                struct.ise.read(iprot);
                struct.setIseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, takeSnapshot_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ise != null) {
          oprot.writeFieldBegin(ISE_FIELD_DESC);
          struct.ise.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class takeSnapshot_resultTupleSchemeFactory implements SchemeFactory {
      public takeSnapshot_resultTupleScheme getScheme() {
        return new takeSnapshot_resultTupleScheme();
      }
    }

    private static class takeSnapshot_resultTupleScheme extends TupleScheme<takeSnapshot_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, takeSnapshot_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIse()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetIse()) {
          struct.ise.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, takeSnapshot_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new org.wso2.carbon.event.processor.management.internal.thrift.data.SnapshotData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ise = new org.wso2.carbon.event.processor.management.internal.thrift.exception.InternalServerException();
          struct.ise.read(iprot);
          struct.setIseIsSet(true);
        }
      }
    }

  }

}
